# -*- coding: utf-8 -*-
"""TinyImageNetLoader.ipynb
Automatically generated by Colaboratory.
"""


import torch
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
from torch.utils.data import Dataset
import os, glob
from torchvision.io import read_image, ImageReadMode

batch_size = 64

id_dict = {}
for i, line in enumerate(open('./tiny-imagenet-200/wnids.txt', 'r')):
  id_dict[line.replace('\n', '')] = i

class TrainTinyImageNetDataset(Dataset):
    def __init__(self, id, transform=None):
        self.filenames = glob.glob("./tiny-imagenet-200/train/*/*/*.JPEG")
        self.transform = transform
        self.id_dict = id

    def __len__(self):
        return len(self.filenames)

    def __getitem__(self, idx):
        img_path = self.filenames[idx]
        image = read_image(img_path)
#        print(image.shape)
        if image.shape[0] == 1:
          image = read_image(img_path,ImageReadMode.RGB)
        label = self.id_dict[img_path.split('/')[3]]
        if self.transform:
            image = self.transform(image.type(torch.FloatTensor))
        return image, label

class TestTinyImageNetDataset(Dataset):
    def __init__(self, id, transform=None):
        self.filenames = glob.glob("./tiny-imagenet-200/val/images/*.JPEG")
        self.transform = transform
        self.id_dict = id
        self.cls_dic = {}
        for i, line in enumerate(open('./tiny-imagenet-200/val/val_annotations.txt', 'r')):
            a = line.split('\t')
            img, cls_id = a[0],a[1]
            self.cls_dic[img] = self.id_dict[cls_id]
 

    def __len__(self):
        return len(self.filenames)

    def __getitem__(self, idx):
        img_path = self.filenames[idx]
        image = read_image(img_path)
        if image.shape[0] == 1:
          image = read_image(img_path,ImageReadMode.RGB)
        label = self.cls_dic[img_path.split('/')[-1]]
        if self.transform:
            image = self.transform(image.type(torch.FloatTensor))
        return image, label

transform = transforms.Normalize((122.4786, 114.2755, 101.3963), (70.4924, 68.5679, 71.8127))

train_transform = transforms.Compose([
      transforms.RandomHorizontalFlip(),
      transforms.RandomCrop(64, padding=4),
#      transforms.ToTensor(),
#      transforms.RandomAffine(30),
      transforms.RandomVerticalFlip(),
#      transforms.RandomPerspective(distortion_scale=0.6, p=1.0),
      transforms.Normalize((122.4786, 114.2755, 101.3963), (70.4924, 68.5679, 71.8127))
])

trainset = TrainTinyImageNetDataset(id=id_dict, transform = train_transform)
#trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=True, num_workers=2)

test_transform = transforms.Compose(
    [transforms.Normalize((122.4786, 114.2755, 101.3963), (70.4924, 68.5679, 71.8127))]
)

testset = TestTinyImageNetDataset(id=id_dict, transform=test_transform)
#testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size, shuffle=False, num_workers=2)


def tiny_imagenet_train_loader(batch_size):
	return torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=True, num_workers=2)



def tiny_imagenet_test_loader(batch_size):
	return torch.utils.data.DataLoader(testset, batch_size=batch_size, shuffle=False, num_workers=2)



